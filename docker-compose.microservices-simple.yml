# Simplified Docker Compose for Microservices Testing
# Focuses on core services for initial deployment and testing

version: '3.8'

networks:
  ams-microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data_microservices:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ams-postgres-microservices
    restart: unless-stopped
    environment:
      POSTGRES_DB: attendance_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-attendance_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_microservices:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/database/init-microservices.sql:/docker-entrypoint-initdb.d/02-microservices.sql
    ports:
      - "5432:5432"
    networks:
      - ams-microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d attendance_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Auth Service
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    image: ams-auth-service:latest
    container_name: ams-auth-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JDBC_DATABASE_URL: jdbc:postgresql://postgres:5432/attendance_db
      JDBC_DATABASE_USERNAME: postgres
      JDBC_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-attendance_secure_2024}
      JWT_SECRET: ${JWT_SECRET:-auth_service_secret_key_2024}
      SERVER_PORT: 8081
      GRPC_SERVER_PORT: 9091
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8081:8081"
      - "9091:9091"
    networks:
      - ams-microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/auth/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # Organization Service
  organization-service:
    build:
      context: ./microservices/organization-service
      dockerfile: Dockerfile
    image: ams-organization-service:latest
    container_name: ams-organization-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JDBC_DATABASE_URL: jdbc:postgresql://postgres:5432/attendance_db
      JDBC_DATABASE_USERNAME: postgres
      JDBC_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-attendance_secure_2024}
      SERVER_PORT: 8082
      GRPC_SERVER_PORT: 9092
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8082:8082"
      - "9092:9092"
    networks:
      - ams-microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/organization/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # Menu Service (for testing public endpoints)
  menu-service:
    build:
      context: ./microservices/menu-service
      dockerfile: Dockerfile
    image: ams-menu-service:latest
    container_name: ams-menu-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JDBC_DATABASE_URL: jdbc:postgresql://postgres:5432/attendance_db
      JDBC_DATABASE_USERNAME: postgres
      JDBC_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-attendance_secure_2024}
      SERVER_PORT: 8085
      GRPC_SERVER_PORT: 9095
      JAVA_OPTS: "-Xmx384m -Xms192m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8085:8085"
      - "9095:9095"
    networks:
      - ams-microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/menu/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    image: ams-api-gateway:latest
    container_name: ams-api-gateway
    restart: unless-stopped
    depends_on:
      - auth-service
      - organization-service
      - menu-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8080:8080"
    networks:
      - ams-microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ams-prometheus-microservices
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ams-microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ams-grafana-microservices
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ams-microservices-network
